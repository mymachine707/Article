package main

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"

	"mymachine707/config"
	docs "mymachine707/docs" // docs is generated by Swag CLI, you have to import it.
	"mymachine707/handlars"
	"mymachine707/storage"
	"mymachine707/storage/postgres"

	_ "github.com/lib/pq"
)

// @contact.name  API Support
// @contact.url   http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url  http://www.apache.org/licenses/LICENSE-2.0.html

func main() {
	cfg := config.Load()

	psqlConfigString:= fmt.Sprintf("user=%s password=%s dbname=%s sslmode=disable", cfg.PostgresUser, cfg.PostgresPassword, cfg.PostgresDatabase)

	fmt.Println("---->>")
	fmt.Printf("%+v\n", cfg)
	fmt.Println("---->>")

	docs.SwaggerInfo.Title = "Swagger Example API"
	docs.SwaggerInfo.Description = "This is a sample server Petstore server."
	docs.SwaggerInfo.Version = "2.0"

	var err error
	var stg storage.Interfaces
	stg, err = postgres.InitDB(psqlConfigString)

	if err != nil {
		panic(err)
	}

	r := gin.Default()

	r.GET("/ping", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{
			"message": "pong",
		})
	})

	h := handlars.Handler{
		Stg: stg,
	}
	// Gruppirovka qilindi
	v1 := r.Group("v2")
	{
		v1.POST("/article", h.CreatArticle)
		v1.GET("/article/:id", h.GetArticleByID)
		v1.GET("/article", h.GetArticleList)
		v1.PUT("/article", h.ArticleUpdate)
		v1.DELETE("/article/:id", h.DeleteArticle)

		v1.POST("/author", h.CreatAuthor)
		v1.GET("/author/:id", h.GetAuthorByID)
		v1.GET("/author", h.GetAuthorList)
		v1.PUT("/author", h.AuthorUpdate)
		v1.DELETE("/author/:id", h.DeleteAuthor)
	}

	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	r.Run(":3000") // listen and serve on 0.0.0.0:8080 (for windows "localhost:8080")
}
